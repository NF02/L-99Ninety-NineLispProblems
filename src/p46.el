(defun and* (a b) (and a b))
(defun or* (a b) (or a b))
(defun nand* (a b) (not (and a b)))
(defun nor* (a b) (not (or a b)))
(defun xor* (a b) (or (and a (not b)) (and (not a) b)))
(defun impl* (a b) (or (not a) b))
(defun equ* (a b) (equal a b))

(defun and* (a b) (and a b))
(defun or* (a b) (or a b))
(defun nand* (a b) (not (and a b)))
(defun nor* (a b) (not (or a b)))
(defun xor* (a b) (or (and a (not b)) (and (not a) b)))
(defun impl* (a b) (or (not a) b))
(defun equ* (a b) (equal a b))

(defun table (var1 var2 expr)
  (dolist (a '(t nil))
    (dolist (b '(t nil))
      (let ((result (eval `(let ((,var1 ,a) (,var2 ,b)) ,expr))))
        (message "%s %s %s" 
                 (if a "true" "nil") 
                 (if b "true" "nil") 
                 (if result "true" "nil"))))))
(table 'A 'B '(and A (or A B)))
